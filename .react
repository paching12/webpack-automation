#!/bin/bash

    ##########################################
    #  React proyect init with webpack       #
    #  @brief install simple dependencies    #
    #  and configure the enviroment webpack  #
    #                                        #
    #          @autor Paching12              #
    #                                        #
    #  @version 0.1                          #
    ##########################################

# @brief Main code, This configures a webpack basic enviroment for React     
# @params string current folder, string devmode  
# @return void
function installReactDependencies() {
	
	##################
	#    Arguments   #
	##################

	#1 - Current dir 
	#2 - DevMode 

	
	# Dev mode
	devMode=false
	# Validate if the devMode is activated
	if [ -z "$2" ]
	then
		devMode=false
	else
		devMode=true
	fi

	# Counter guide
	numberSteps=0

	# Main path
	mainPath='src'

	# Main React file
	mainReactFile='index.js'

	# Main file compiled
	mainFileCompiled='main.js'

	#Main html file
	mainFileHtml='index.html'

	# Validate if the first argument exist
	if [ -z "$1" ]
	then
		echo "No argument supplied üê≥ "
		return 0
	fi

	# Verify if the current dir is the same with the specified in the arguments 
	currentPath=${PWD##*/}

	if [ "$currentPath" != "$1" ]; then
		echo "Current path didn't match with the first argument -> $currentPath üê≥"
		return 0
	fi
	

	if [ "$devMode" = false ] ; then
		#/0 Inicializar proyecto
		npm init -y && echo "‚úÖ Step $numberSteps - Proyect Initialization..."

		numberSteps=$((numberSteps+1))

		#/1 Intall webpack and utilities
		echo "npm i $dependencies --save-dev" 
		npm i webpack webpack-cli html-webpack-plugin webpack-dev-server --save-dev && echo "‚úÖ Step $numberSteps - Install webpack and plugins"
	fi

	#/2 Make directory src and index.js file
	mkdir -p $mainPath 

	if [[ ! -e "$mainPath/$mainReactFile" ]]; then
		touch "$mainPath/$mainReactFile"
		
		indexReact=$(getBasicRenderReact)
		echo "$indexReact" > "$mainPath/$mainReactFile"
	fi

	numberSteps=$((numberSteps+1))
	echo "‚úÖ Step $numberSteps - Make directory src and index.js file"

	numberSteps=$((numberSteps+1))

	if [ "$devMode" = false ] ; then
		
		#/3 Install react/dom, babel
		npm i react react-dom @babel/core @babel/preset-env @babel/preset-react babel-loader 
	
	fi

	documentHTML=$(getHTMLStructure "SPA main html file")  

	if [[ ! -e "$mainPath/$mainFileHtml" ]]; then
		touch "$mainPath/$mainFileHtml"
	fi
	
	echo "$documentHTML" > "$mainPath/$mainFileHtml" && echo "‚úÖ Step $numberSteps - Install react/dom, babel and make html template "

	numberSteps=$((numberSteps+1))

	# Webpack single content config
	config=$(getBasicWebpackEnviroment) 

	#/4 Create webpack file config
	echo "$config" > webpack.config.js && echo "‚úÖ Step $numberSteps - Webpack single content config"
	
	numberSteps=$((numberSteps+1))

	#/5 Add build command to scripts package json  
	commandBuild="\"build\": \"webpack\","
	addCommandToScripts  "$commandBuild" && echo "‚úÖ Step $numberSteps - Add build command to scripts package json "

	numberSteps=$((numberSteps+1))
	commandServer="\"dev\": \"webpack-dev-server\","
	addCommandToScripts  "$commandServer" && echo "‚úÖ Step $numberSteps - Add dev (webpack-dev-server) command to scripts package json "

	# Free memory
	unset commandBuild
	unset commandServer
	unset documentHTML
	unset config
	unset indexDocument

	numberSteps=$((numberSteps+1))
	
	#/6 Finally run the dev server with webpack
	echo "‚úÖ Step $numberSteps - Finally run the dev server with webpack"
	npm run dev 
	
	# Manual way compone and run 
	: 'numberSteps=$((numberSteps+1))
	if [ "$devMode" = false ] ; then

		#/4 Pack/Compile the modules with webpack
		./node_modules/.bin/webpack "$mainPath/$mainReactFile" && "‚úÖ Step $numberSteps - Pack/Compile the modules with webpack"
		numberSteps=$((numberSteps+1))
		
		#/6 Execute with node
		node "dist/$mainFileCompiled" && echo "‚úÖ Step $numberSteps - Execute with node"
	
	fi'
	
}

# @brief This function add Command to package.json file inside scripts
# @params string script specified,  
# @return void
function addCommandToScripts () {
	
	if [ -z "$1" ]
	then
		echo "No argument supplied to $0 function üê≥ "
		return 125
	fi

	local scripts="\"scripts\": {"
	local command="$scripts\n    $1"
	sed -i "s/$scripts/$command/g" package.json 
}

# @brief This function return a basic code from webpack
# @params void,  
# @return string
function getBasicWebpackEnviroment () {
	echo "
// WebPack Dependencies/Plugins
const HtmlWebPackPlugin = require('html-webpack-plugin');

module.exports = {
	output: {
		filename: 'app.bundle.js'
	},
	plugins: [
		new HtmlWebPackPlugin({
			template: 'src/index.html'
		}),
	],
	module: {
		rules: [
		{
			test: /\.js$/,
			exclude: /node_modules/,
			use: {
				loader: 'babel-loader',
				options: {
					presets: [
					'@babel/preset-env', 
					'@babel/preset-react'
					]
				}
			}
		}
		]
	}
}"
}

# @brief This function provide a basic code from react [file src/index.js]
# @params void,  
# @return string
function getBasicRenderReact () {
	echo "\
import React from 'react'
import ReactDOM from 'react-dom'

ReactDOM.render( <h1>Example with babel</h1>, document.getElementById('app') );
"
}

# @brief This function provide a basic structure of HTML
# @params string title of document,  
# @return string
function getHTMLStructure() {

	if [ -z "$1" ]
	then
		echo "No argument supplied to $0 function üê≥ "
		return 125
	fi

	echo "\
<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <meta http-equiv='X-UA-Compatible' content='ie=edge'>
    <title>$1</title>
</head>
<body>
	<div id='app'></div>    
</body>
</html> "
}